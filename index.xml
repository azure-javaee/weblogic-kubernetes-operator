<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WebLogic Kubernetes Operator</title>
    <link>/weblogic-kubernetes-operator/</link>
    <description>Recent content on WebLogic Kubernetes Operator</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Mar 2019 11:25:28 -0400</lastBuildDate>
    
	<atom:link href="/weblogic-kubernetes-operator/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Managing domain namespaces</title>
      <link>/weblogic-kubernetes-operator/faq/namespace-management/</link>
      <pubDate>Thu, 19 Sep 2019 10:41:32 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/faq/namespace-management/</guid>
      <description>Each operator deployment manages a number of Kubernetes Namespaces. For more information, see Operator Helm configuration values. A number of Kubernetes resources must be present in a namespace before any WebLogic domain custom resources can be successfully deployed into it. Those Kubernetes resources are created either as part of the installation of the operator&amp;rsquo;s Helm chart, or created by the operator at runtime.
This FAQ describes some considerations to be aware of when you manage the namespaces while the operator is running.</description>
    </item>
    
    <item>
      <title>Docker image layering</title>
      <link>/weblogic-kubernetes-operator/userguide/cicd/layering/</link>
      <pubDate>Thu, 11 Apr 2019 13:15:32 -0400</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/cicd/layering/</guid>
      <description>Docker images are composed of layers, as shown in the diagram below. If you download the standard weblogic:12.2.1.4 image from the Oracle Container Registry, then you can see these layers using the command docker inspect container-registry.oracle.com/middleware/weblogic:12.2.1.4 (the domain layer will not be there). You are not required to use layers, but efficient use of layers is considered a best practice.
Why is it important to maintain the layering of images? Layering is an important technique in Docker images.</description>
    </item>
    
    <item>
      <title>Docker image protection</title>
      <link>/weblogic-kubernetes-operator/security/domain-security/image-protection/</link>
      <pubDate>Fri, 08 Mar 2019 19:00:49 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/security/domain-security/image-protection/</guid>
      <description>WebLogic domain in Docker image protection Oracle strongly recommends storing the Docker images that contain a WebLogic domain home as private in the Docker registry. In addition to any local registry, public Docker registries include Docker Hub and the Oracle Cloud Infrastructure Registry (OCIR).
 The WebLogic domain home that is part of a Docker image contains sensitive information about the domain including keys and credentials that are used to access external resources (for example, the data source password).</description>
    </item>
    
    <item>
      <title>Certificates</title>
      <link>/weblogic-kubernetes-operator/security/certificates/</link>
      <pubDate>Wed, 06 Mar 2019 21:14:18 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/security/certificates/</guid>
      <description>Updating operator external certificates If the operator needs to update the external certificate and key currently being used or was installed without an external REST API SSL/TLS identity, the helm upgrade command is used to restart the operator with the new or updated Kubernetes tls secret that contains the desired certificates.
The operator requires a restart in order to begin using the new or updated external certificate. The Helm --recreate-pods flag is used to cause the existing Kubernetes Pod to be terminated and a new pod to be started with the updated configuration.</description>
    </item>
    
    <item>
      <title>Prerequisites</title>
      <link>/weblogic-kubernetes-operator/samples/simple/domains/model-in-image/prerequisites/</link>
      <pubDate>Sat, 23 Feb 2019 17:32:31 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/samples/simple/domains/model-in-image/prerequisites/</guid>
      <description>Prerequisites for all domain types   Choose the type of domain you&amp;rsquo;re going to use throughout the sample, WLS or JRF.
 The first time you try this sample, we recommend that you choose WLS even if you&amp;rsquo;re familiar with JRF. This is because WLS is simpler and will more easily familiarize you with Model in Image concepts. We recommend choosing JRF only if you are already familiar with JRF, you have already tried the WLS path through this sample, and you have a definite use case where you need to use JRF.</description>
    </item>
    
    <item>
      <title>Requirements</title>
      <link>/weblogic-kubernetes-operator/developerguide/requirements/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:19 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/developerguide/requirements/</guid>
      <description>In addition to the requirements listed in the User guide, the following software is also required to obtain and build the operator:
 Git (1.8 or later recommended) Java Developer Kit (11 required, 11.0.2 recommended) Apache Maven (3.5.3 min, 3.6 recommended)  The operator is written primarily in Java, BASH shell scripts, and WLST scripts.
Because the target runtime environment for the operator is Oracle Linux, no particular effort has been made to ensure the build or tests run on any other operating system.</description>
    </item>
    
    <item>
      <title>Use Helm</title>
      <link>/weblogic-kubernetes-operator/userguide/managing-operators/using-the-operator/using-helm/</link>
      <pubDate>Sat, 23 Feb 2019 17:08:43 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/managing-operators/using-the-operator/using-helm/</guid>
      <description>Contents  Useful Helm operations Operator Helm configuration values  Overall operator information Creating the operator pod WebLogic domain management Elastic Stack integration REST interface configuration Debugging options   Common mistakes and solutions  Note that the operator Helm chart is available from the GitHub chart repository, see Alternatively, install the operator Helm chart from the GitHub chart repository.
Useful Helm operations Show the available operator configuration parameters and their default values:</description>
    </item>
    
    <item>
      <title>Startup and shutdown</title>
      <link>/weblogic-kubernetes-operator/userguide/managing-domains/domain-lifecycle/startup/</link>
      <pubDate>Sat, 23 Feb 2019 17:04:41 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/managing-domains/domain-lifecycle/startup/</guid>
      <description>Contents  Starting and stopping servers  Common starting and stopping scenarios   Shutdown options Restarting servers  Rolling restarts Common restarting scenarios    There are fields on the Domain that specify which servers should be running, which servers should be restarted, and the desired initial state. To start, stop, or restart servers, modify these fields on the Domain (for example, by using kubectl or the Kubernetes REST API).</description>
    </item>
    
    <item>
      <title>Prepare to run a domain</title>
      <link>/weblogic-kubernetes-operator/userguide/managing-domains/prepare/</link>
      <pubDate>Sat, 23 Feb 2019 16:43:45 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/managing-domains/prepare/</guid>
      <description>Perform these steps to prepare your Kubernetes cluster to run a WebLogic domain:
  Create the domain namespace or namespaces. One or more domains can share a namespace. A single instance of the operator can manage multiple namespaces.
$ kubectl create namespace domain-namespace-1 Replace domain-namespace-1 with name you want to use. The name must follow standard Kubernetes naming conventions, that is, lower case, numbers, and hyphens.
  Create a Kubernetes Secret containing the Administration Server boot credentials.</description>
    </item>
    
    <item>
      <title>Prepare your environment</title>
      <link>/weblogic-kubernetes-operator/userguide/overview/prepare/</link>
      <pubDate>Sat, 23 Feb 2019 16:43:10 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/overview/prepare/</guid>
      <description>Set up your Kubernetes cluster If you need help setting up a Kubernetes environment, check our cheat sheet.
After creating Kubernetes clusters, you can optionally:
 Create load balancers to direct traffic to backend domains. Configure Kibana and Elasticsearch for your operator logs.  Load balance with an ingress controller or a web server You can choose a load balancer provider for your WebLogic domains running in a Kubernetes cluster. For information about the current capabilities and setup instructions for each of the supported load balancers, see the WebLogic Operator Load Balancer Samples.</description>
    </item>
    
    <item>
      <title>Get started</title>
      <link>/weblogic-kubernetes-operator/userguide/introduction/introduction/</link>
      <pubDate>Sat, 23 Feb 2019 16:40:54 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/introduction/introduction/</guid>
      <description>An operator is an application-specific controller that extends Kubernetes to create, configure, and manage instances of complex applications. The Oracle WebLogic Server Kubernetes Operator follows the standard Kubernetes operator pattern, and simplifies the management and operation of WebLogic domains and deployments.
You can have one or more operators in your Kubernetes cluster that manage one or more WebLogic domains each. We provide a Helm chart to manage the installation and configuration of the operator.</description>
    </item>
    
    <item>
      <title>Javadoc</title>
      <link>/weblogic-kubernetes-operator/reference/javadoc/</link>
      <pubDate>Fri, 22 Feb 2019 16:17:01 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/reference/javadoc/</guid>
      <description>View the Java API documentation here.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>/weblogic-kubernetes-operator/quickstart/introduction/</link>
      <pubDate>Fri, 22 Feb 2019 15:44:42 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/quickstart/introduction/</guid>
      <description>Use this Quick Start guide to create a WebLogic deployment in a Kubernetes cluster with the Oracle WebLogic Server Kubernetes Operator. Please note that this walk-through is for demonstration purposes only, not for use in production. These instructions assume that you are already familiar with Kubernetes. If you need more detailed instructions, please refer to the User guide.
All Kubernetes distributions and managed services have small differences. In particular, the way that persistent storage and load balancers are managed varies significantly.</description>
    </item>
    
    <item>
      <title>Why layering matters</title>
      <link>/weblogic-kubernetes-operator/userguide/cicd/why-layering-matters/</link>
      <pubDate>Thu, 11 Apr 2019 13:27:58 -0400</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/cicd/why-layering-matters/</guid>
      <description>How does layering affect our CI/CD process? Now that we know more about layering, let’s talk about why it is important to our CI/CD process. Let&amp;rsquo;s consider the kinds of updates we might want to make to our domain:
You might want to update the domain by:
 Installing a patch on the operating system or a library. Updating the version of the JDK you are using. Picking up a new version of WebLogic Server.</description>
    </item>
    
    <item>
      <title>Cannot pull image</title>
      <link>/weblogic-kubernetes-operator/faq/cannot-pull-image/</link>
      <pubDate>Sat, 23 Mar 2019 08:08:19 -0400</pubDate>
      
      <guid>/weblogic-kubernetes-operator/faq/cannot-pull-image/</guid>
      <description>My domain will not start and I see errors like ImagePullBackoff or Cannot pull image
 When you see these kinds of errors, it means that Kubernetes cannot find your Docker image. The most common causes are:
 The image value in your Domain is set incorrectly, meaning Kubernetes will be trying to pull the wrong image. The image requires authentication or permission in order to pull it and you have not configured Kubernetes with the necessary credentials, for example in an imagePullSecret.</description>
    </item>
    
    <item>
      <title>Channels</title>
      <link>/weblogic-kubernetes-operator/security/domain-security/weblogic-channels/</link>
      <pubDate>Fri, 08 Mar 2019 19:07:36 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/security/domain-security/weblogic-channels/</guid>
      <description>WebLogic T3 channels Oracle recommends not exposing any administrative, RMI, or T3 channels outside the Kubernetes cluster unless absolutely necessary. If exposing any of these channels, limit access using controls like security lists or set up a Bastion to provide access.
 When accessing T3 or RMI based channels, the preferred approach is to kubectl exec into the Kubernetes Pod and then run wlst, or set up Bastion access and then run wlst from the Bastion host to connect to the Kubernetes cluster.</description>
    </item>
    
    <item>
      <title>Restarting</title>
      <link>/weblogic-kubernetes-operator/userguide/managing-domains/domain-lifecycle/restarting/</link>
      <pubDate>Sat, 23 Feb 2019 20:58:51 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/managing-domains/domain-lifecycle/restarting/</guid>
      <description>This document describes when WebLogic Server instances should and will be restarted in the Kubernetes environment.
Overview There are many situations where changes to the WebLogic or Kubernetes environment configuration require that all the servers in a domain or cluster be restarted, for example, when applying a WebLogic Server patch or when upgrading an application.
One of the operator&amp;rsquo;s most important jobs is to start and stop WebLogic Server instances by creating and deleting their corresponding Kubernetes pods.</description>
    </item>
    
    <item>
      <title>Demo</title>
      <link>/weblogic-kubernetes-operator/userguide/introduction/demo/</link>
      <pubDate>Sat, 23 Feb 2019 20:51:59 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/introduction/demo/</guid>
      <description>This video provides a demonstration of the WebLogic Server Kubernetes Operator.
   This video provides a demonstration of the WebLogic Server Kubernetes Operator.</description>
    </item>
    
    <item>
      <title>Initial use case</title>
      <link>/weblogic-kubernetes-operator/samples/simple/domains/model-in-image/initial/</link>
      <pubDate>Sat, 23 Feb 2019 17:32:31 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/samples/simple/domains/model-in-image/initial/</guid>
      <description>Contents  Overview Image creation  Image creation - Introduction Understanding your first archive Staging a ZIP file of the archive Staging model files Creating the image with WIT   Deploy resources  Deploy resources - Introduction Secrets Domain resource    Overview In this use case, you set up an initial WebLogic domain. This involves:
 A WDT archive ZIP file that contains your applications. A WDT model that describes your WebLogic configuration.</description>
    </item>
    
    <item>
      <title>Domain resource</title>
      <link>/weblogic-kubernetes-operator/userguide/managing-domains/domain-resource/</link>
      <pubDate>Sat, 23 Feb 2019 16:43:45 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/managing-domains/domain-resource/</guid>
      <description>Contents  Overview Prerequisites Deploying domain resource YAML files Domain resource custom resource definition (CRD) Domain resource attribute references Using kubectl explain Domain spec elements JVM memory and Java option environment variables Pod generation  Overview Use this document to create your own Domain resource, which can be used to configure the operation of your WebLogic Server domain. The Domain resource does not replace the traditional domain configuration files, but instead cooperates with those files to describe the Kubernetes artifacts of the corresponding domain.</description>
    </item>
    
    <item>
      <title>Set up Kubernetes</title>
      <link>/weblogic-kubernetes-operator/userguide/overview/k8s-setup/</link>
      <pubDate>Sat, 23 Feb 2019 16:43:10 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/overview/k8s-setup/</guid>
      <description>Cheat sheet for setting up Kubernetes If you need some help setting up a Kubernetes environment to experiment with the operator, please read on! The supported environments are either an on-premises installation of Kubernetes, for example, on bare metal, or on a cloud provider like Oracle Cloud, Google, or Amazon. Cloud providers allow you to provision a managed Kubernetes environment from their management consoles. You could also set up Kubernetes manually using compute resources on a cloud.</description>
    </item>
    
    <item>
      <title>Swagger</title>
      <link>/weblogic-kubernetes-operator/reference/swagger/</link>
      <pubDate>Fri, 22 Feb 2019 16:17:07 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/reference/swagger/</guid>
      <description>View the Swagger REST API documentation here.</description>
    </item>
    
    <item>
      <title>Before you begin</title>
      <link>/weblogic-kubernetes-operator/quickstart/prerequisites/</link>
      <pubDate>Fri, 22 Feb 2019 15:44:42 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/quickstart/prerequisites/</guid>
      <description>For this exercise, you’ll need a Kubernetes cluster. If you need help setting one up, check out our cheat sheet. This guide assumes a single node cluster.
The operator uses Helm to create and deploy the necessary resources and then run the operator in a Kubernetes cluster. For Helm installation and usage information, see Install Helm.
You should clone this repository to your local machine so that you have access to the various sample files mentioned throughout this guide:</description>
    </item>
    
    <item>
      <title>Boot identity not valid</title>
      <link>/weblogic-kubernetes-operator/faq/boot-identity-not-valid/</link>
      <pubDate>Mon, 02 Mar 2020 08:08:19 -0401</pubDate>
      
      <guid>/weblogic-kubernetes-operator/faq/boot-identity-not-valid/</guid>
      <description>One or more WebLogic Server instances in my domain will not start and I see errors in the server log like this:
&amp;lt;Feb 6, 2020 12:05:35,550 AM GMT&amp;gt; &amp;lt;Authentication denied: Boot identity not valid. The user name or password or both from the boot identity file (boot.properties) is not valid. The boot identity may have been changed since the boot identity file was created. Please edit and update the boot identity file with the proper values of username and password.</description>
    </item>
    
    <item>
      <title>Choose an approach</title>
      <link>/weblogic-kubernetes-operator/userguide/cicd/choose-an-approach/</link>
      <pubDate>Thu, 11 Apr 2019 13:36:57 -0400</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/cicd/choose-an-approach/</guid>
      <description>Let&amp;rsquo;s review what we have discussed and talk about when we might want to use various approaches. We can start by asking ourselves questions like these:
  Can you make the desired change with a configuration override or Model in Image ConfigMap?
When your domain home source type is Domain in PV or Domain in Image, the operator allows you to inject a number of configuration overrides into your pods before starting any servers in the domain.</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>/weblogic-kubernetes-operator/userguide/introduction/architecture/</link>
      <pubDate>Sat, 23 Feb 2019 20:51:45 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/introduction/architecture/</guid>
      <description>The operator consists of the following parts:
 The operator runtime, a process that runs in a Docker container deployed into a Kubernetes Pod and which performs the actual management tasks. The model for a Kubernetes custom resource definition (CRD) that when installed in a Kubernetes cluster allows the Kubernetes API server to manage instances of this new type representing the operational details and status of WebLogic domains. A Helm chart for installing the operator runtime and related resources.</description>
    </item>
    
    <item>
      <title>Use WLST</title>
      <link>/weblogic-kubernetes-operator/userguide/managing-domains/accessing-the-domain/wlst/</link>
      <pubDate>Sat, 23 Feb 2019 17:39:19 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/managing-domains/accessing-the-domain/wlst/</guid>
      <description>You can use the WebLogic Scripting Tool (WLST) to manage a domain running in Kubernetes. If the Administration Server was configured to expose a T3 channel using the exposeAdminT3Channel setting when creating the domain, then the matching T3 service can be used to connect. For example, if the domainUID is domain1, and the Administration Server name is admin-server, then the service would be called:
domain1-admin-server-external This service will be in the same namespace as the domain.</description>
    </item>
    
    <item>
      <title>Encryption</title>
      <link>/weblogic-kubernetes-operator/security/encryption/</link>
      <pubDate>Sat, 23 Feb 2019 17:36:29 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/security/encryption/</guid>
      <description>Contents  Introspector encryption Encryption of Kubernetes Secrets Additional reading  Introspector encryption The operator has an introspection job that handles WebLogic domain encryption. The introspection job also addresses the use of Kubernetes Secrets with configuration overrides. For additional information on the configuration handling, see Configuration overrides.
The introspection job also creates a boot.properties file that is made available to the pods in the WebLogic domain. The credential used for the WebLogic domain is kept in a Kubernetes Secret which follows the naming pattern &amp;lt;domainUID&amp;gt;-weblogic-credentials, where &amp;lt;domainUID&amp;gt; is the unique identifier of the domain, for example, mydomain-weblogic-credentials.</description>
    </item>
    
    <item>
      <title>Update 1</title>
      <link>/weblogic-kubernetes-operator/samples/simple/domains/model-in-image/update1/</link>
      <pubDate>Sat, 23 Feb 2019 17:32:31 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/samples/simple/domains/model-in-image/update1/</guid>
      <description>This use case demonstrates dynamically adding a data source to your running domain. It demonstrates several features of WDT and Model in Image:
 The syntax used for updating a model is the same syntax you use for creating the original model. A domain&amp;rsquo;s model can be updated dynamically by supplying a model update in a file in a Kubernetes ConfigMap. Model updates can be as simple as changing the value of a single attribute, or more complex, such as adding a JMS Server.</description>
    </item>
    
    <item>
      <title>Building</title>
      <link>/weblogic-kubernetes-operator/developerguide/building/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/developerguide/building/</guid>
      <description>The operator is built using Apache Maven. The build machine will also need to have Docker installed.
To build the operator, issue the following command in the project directory:
$ mvn clean install This will compile the source files, build JAR files containing the compiled classes and libraries needed to run the operator, and will also execute all of the unit tests.
Contributions must conform to coding and formatting standards.</description>
    </item>
    
    <item>
      <title>The REST API</title>
      <link>/weblogic-kubernetes-operator/userguide/managing-operators/using-the-operator/the-rest-api/</link>
      <pubDate>Sat, 23 Feb 2019 17:08:32 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/managing-operators/using-the-operator/the-rest-api/</guid>
      <description>Use the operator&amp;rsquo;s REST services The operator provides a REST server which you can use to get a list of WebLogic domains and clusters and to initiate scaling operations. Swagger documentation for the REST API is available here.
You can access most of the REST services using GET, for example:
 To obtain a list of domains, send a GET request to the URL /operator/latest/domains To obtain a list of clusters in a domain, send a GET request to the URL /operator/latest/domains/&amp;lt;domainUID&amp;gt;/clusters  All of the REST services require authentication.</description>
    </item>
    
    <item>
      <title>Scaling</title>
      <link>/weblogic-kubernetes-operator/userguide/managing-domains/domain-lifecycle/scaling/</link>
      <pubDate>Sat, 23 Feb 2019 17:04:45 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/managing-domains/domain-lifecycle/scaling/</guid>
      <description>WebLogic Server supports two types of clustering configurations, configured and dynamic. Configured clusters are created by defining each individual Managed Server instance. In dynamic clusters, the Managed Server configurations are generated from a single, shared template. With dynamic clusters, when additional server capacity is needed, new server instances can be added to the cluster without having to configure them individually. Also, unlike configured clusters, scaling up of dynamic clusters is not restricted to the set of servers defined in the cluster but can be increased based on runtime demands.</description>
    </item>
    
    <item>
      <title>Run a database</title>
      <link>/weblogic-kubernetes-operator/userguide/overview/database/</link>
      <pubDate>Sat, 23 Feb 2019 16:43:10 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/overview/database/</guid>
      <description>Run the Oracle database in Kubernetes If you want to run the Oracle database inside your Kubernetes cluster, in order to place your state store, leasing tables, and such, in that database, then you can use this sample to install the database.
The Oracle Database Docker images are only supported for non-production use. For more details, see My Oracle Support note: Oracle Support for Database Running on Docker (Doc ID 2216342.</description>
    </item>
    
    <item>
      <title>Domain resource</title>
      <link>/weblogic-kubernetes-operator/reference/domain-resource/</link>
      <pubDate>Fri, 22 Feb 2019 16:17:07 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/reference/domain-resource/</guid>
      <description>View the Domain reference document here.</description>
    </item>
    
    <item>
      <title>Get images</title>
      <link>/weblogic-kubernetes-operator/quickstart/get-images/</link>
      <pubDate>Fri, 22 Feb 2019 15:44:42 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/quickstart/get-images/</guid>
      <description>Get these images and put them into your local registry.   If you don&amp;rsquo;t already have one, obtain a Docker store account, log in to the Docker store, and accept the license agreement for the WebLogic Server image.
  Log in to the Docker store from your Docker client:
$ docker login   Pull the operator image:
$ docker pull oracle/weblogic-kubernetes-operator:3.0.3   Pull the Traefik load balancer image:</description>
    </item>
    
    <item>
      <title>Domain secret mismatch</title>
      <link>/weblogic-kubernetes-operator/faq/domain-secret-mismatch/</link>
      <pubDate>Mon, 02 Mar 2020 08:08:19 -0400</pubDate>
      
      <guid>/weblogic-kubernetes-operator/faq/domain-secret-mismatch/</guid>
      <description>One or more WebLogic Server instances in my domain will not start and the Domain status or the pod log reports errors like this:
Domain secret mismatch. The domain secret in DOMAIN_HOME/security/SerializedSystemIni.dat where DOMAIN_HOME=$DOMAIN_HOME does not match the domain secret found by the introspector job. WebLogic requires that all WebLogic Servers in the same domain share the same domain secret.
 When you see these kinds of errors, it means that the WebLogic domain directory&amp;rsquo;s security configuration files have changed in an incompatible way between when the operator scanned the domain directory, which occurs during the &amp;ldquo;introspection&amp;rdquo; phase, and when the server instance attempted to start.</description>
    </item>
    
    <item>
      <title>Publish logs to Elasticsearch</title>
      <link>/weblogic-kubernetes-operator/samples/simple/elastic-stack/soa-domain/weblogic-logging-exporter-setup/</link>
      <pubDate>Thu, 05 Dec 2019 06:46:23 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/samples/simple/elastic-stack/soa-domain/weblogic-logging-exporter-setup/</guid>
      <description>The WebLogic Logging Exporter adds a log event handler to WebLogic Server. WebLogic Server logs can be pushed to Elasticsearch in Kubernetes directly by using the Elasticsearch REST API. For more details, refer to the WebLogic Logging Exporter project.
This sample shows you how to publish WebLogic Server logs to Elasticsearch and view them in Kibana. For publishing operator logs, see this sample.
Prerequisites This document assumes that you have already set up Elasticsearch and Kibana for logs collection.</description>
    </item>
    
    <item>
      <title>Mutate the domain layer</title>
      <link>/weblogic-kubernetes-operator/userguide/cicd/mutate-the-domain-layer/</link>
      <pubDate>Thu, 11 Apr 2019 13:43:41 -0400</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/cicd/mutate-the-domain-layer/</guid>
      <description>If you need to mutate the domain layer, and keep the same domain encryption keys, then there are some choices about how to implement that, as alluded to previously. Let&amp;rsquo;s explore those in some more detail now.
The first option is to implement each mutation as a delta to the previous state. This is conceptually similar to how immutable objects (like Java Strings) are implemented, a &amp;ldquo;copy on write&amp;rdquo; approach applied to the domain configuration as a unit.</description>
    </item>
    
    <item>
      <title>Design philosophy</title>
      <link>/weblogic-kubernetes-operator/userguide/introduction/design/</link>
      <pubDate>Sat, 23 Feb 2019 20:51:51 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/introduction/design/</guid>
      <description>The Oracle WebLogic Server Kubernetes Operator (the “operator”) is designed to fulfill a similar role to that which a human operator would fill in a traditional data center deployment. It contains a set of useful built-in knowledge about how to perform various life cycle operations on a domain correctly.
Human operators are typically responsible for starting and stopping environments, performing scaling operations, performing manual tasks associated with disaster recovery and high availability needs and coordinating actions with other operators in other data centers.</description>
    </item>
    
    <item>
      <title>Service accounts</title>
      <link>/weblogic-kubernetes-operator/security/service-accounts/</link>
      <pubDate>Sat, 23 Feb 2019 17:36:12 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/security/service-accounts/</guid>
      <description>WebLogic Server Kubernetes Operator ServiceAccounts When the operator is installed, the Helm chart property, serviceAccount, can be specified where the value contains the name of the Kubernetes ServiceAccount in the namespace in which the operator will be installed. For more information about the Helm chart, see the Operator Helm configuration values.
The operator will use this ServiceAccount when calling the Kubernetes API server and the appropriate access controls will be created for this ServiceAccount by the operator&amp;rsquo;s Helm chart.</description>
    </item>
    
    <item>
      <title>Update 2</title>
      <link>/weblogic-kubernetes-operator/samples/simple/domains/model-in-image/update2/</link>
      <pubDate>Sat, 23 Feb 2019 17:32:31 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/samples/simple/domains/model-in-image/update2/</guid>
      <description>This use case demonstrates concurrently deploying a domain that is similar to the Update 1 use case domain to the same sample-domain1-ns namespace, but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:
 Using the same image, image model YAML file, and application archive as the Initial and Update 1 use cases. Using the same model update ConfigMap source file as the Update 1 use case (a data source).</description>
    </item>
    
    <item>
      <title>Integration tests</title>
      <link>/weblogic-kubernetes-operator/developerguide/integration-tests/</link>
      <pubDate>Sat, 23 Feb 2019 17:23:22 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/developerguide/integration-tests/</guid>
      <description>The project includes integration tests that can be run against a Kubernetes cluster. If you want to use these tests, you will need to provide your own Kubernetes cluster. The Kubernetes cluster must meet the version number requirements and have Helm installed. Ensure that the operator Docker image is in a Docker registry visible to the Kubernetes cluster.
You will need to obtain the kube.config file for an administrative user and make it available on the machine running the build.</description>
    </item>
    
    <item>
      <title>Branching</title>
      <link>/weblogic-kubernetes-operator/developerguide/branching/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:29 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/developerguide/branching/</guid>
      <description>The master branch is protected and contains source for the most recently published release, including release candidates.
The develop branch is protected and contains source for the latest completed features and bug fixes. While this branch contains active work, we expect to keep it always &amp;ldquo;ready to release.&amp;rdquo; Therefore, longer running feature work will be performed on specific branches, such as feature/dynamic-clusters.
Because we want to balance separating destabilizing work into feature branches against the possibility of later difficult merges, we encourage developers working on features to pull out any necessary refactoring or improvements that are general purpose into their own shorter-lived branches and create pull requests to develop when these smaller work items are completed.</description>
    </item>
    
    <item>
      <title>Install the operator and load balancer</title>
      <link>/weblogic-kubernetes-operator/quickstart/install/</link>
      <pubDate>Fri, 22 Feb 2019 15:44:42 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/quickstart/install/</guid>
      <description>Grant the Helm service account the cluster-admin role. $ cat &amp;lt;&amp;lt;EOF | kubectl apply -f - apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: helm-user-cluster-admin-role roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-admin subjects: - kind: ServiceAccount name: default namespace: kube-system EOF Use Helm to install the operator and Traefik load balancer. First, set up Helm:
$ helm repo add stable https://kubernetes-charts.storage.googleapis.com/ Create a Traefik (ingress-based) load balancer. Create a namespace for the load balancer.</description>
    </item>
    
    <item>
      <title>Domain introspection</title>
      <link>/weblogic-kubernetes-operator/userguide/managing-domains/domain-lifecycle/introspection/</link>
      <pubDate>Tue, 07 Jul 2020 08:14:51 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/managing-domains/domain-lifecycle/introspection/</guid>
      <description>This document describes domain introspection, when it occurs automatically, and how and when to initiate additional introspections of the domain configuration in the Oracle WebLogic Server in Kubernetes environment.
In order to manage the operation of WebLogic domains in Kubernetes, the Oracle WebLogic Kubernetes Operator analyzes the WebLogic domain configuration using an &amp;ldquo;introspection&amp;rdquo; job. This Job will be named DOMAIN_UID-introspect-domain-job, will be run in the same namespace as the Domain, and must successfully complete before the operator will begin to start WebLogic Server instances.</description>
    </item>
    
    <item>
      <title>Node heating problem</title>
      <link>/weblogic-kubernetes-operator/faq/node-heating/</link>
      <pubDate>Wed, 03 Jun 2020 08:08:19 -0400</pubDate>
      
      <guid>/weblogic-kubernetes-operator/faq/node-heating/</guid>
      <description>The WebLogic Server Kubernetes Operator creates a Pod for each WebLogic Server instance that is started. The Kubernetes Scheduler then selects a Node for each Pod. Because the default scheduling algorithm gives substantial weight to selecting a Node where the necessary Docker images have already been pulled, this often results in Kubernetes running many of the Pods for WebLogic Server instances on the same Node while other Nodes are not fairly utilized.</description>
    </item>
    
    <item>
      <title>Monitor a SOA domain</title>
      <link>/weblogic-kubernetes-operator/samples/simple/elastic-stack/soa-domain/weblogic-monitoring-exporter-setup/</link>
      <pubDate>Thu, 05 Dec 2019 06:46:23 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/samples/simple/elastic-stack/soa-domain/weblogic-monitoring-exporter-setup/</guid>
      <description>Monitor a SOA domain using Prometheus and Grafana by exporting the metrics from the domain instance using the WebLogic Monitoring Exporter. This sample shows you how to set up the WebLogic Monitoring Exporter to push the data to Prometheus.
Prerequisites This document assumes that the Prometheus Operator is deployed on the Kubernetes cluster. If it is not already deployed, follow the steps below for deploying the Prometheus Operator.
Clone the kube-prometheus project $ git clone https://github.</description>
    </item>
    
    <item>
      <title>Copy domains</title>
      <link>/weblogic-kubernetes-operator/userguide/cicd/how-to-copy-domains/</link>
      <pubDate>Thu, 11 Apr 2019 13:48:15 -0400</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/cicd/how-to-copy-domains/</guid>
      <description>The recommended approach to save a copy of a Domain in Image or Domain in PV domain is to simply ZIP (or tar) the domain directory. However, there is a very important caveat with this recommendation - when you unzip the domain, it must go back into exactly the same location (Domain Home) in the (new) file system. Using this approach will maintain the same domain encryption key.
The best practice/recommended approach is to create a &amp;ldquo;primordial domain&amp;rdquo; which does not contain any applications or resources, and to create a ZIP file of this domain before starting any servers.</description>
    </item>
    
    <item>
      <title>Update 3</title>
      <link>/weblogic-kubernetes-operator/samples/simple/domains/model-in-image/update3/</link>
      <pubDate>Sat, 23 Feb 2019 17:32:31 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/samples/simple/domains/model-in-image/update3/</guid>
      <description>The Update 3 use case demonstrates deploying an updated WebLogic application to the running Update 1 use case domain using an updated Docker image.
In the use case, you will:
 Create an image model-in-image:WLS-v2 that is similar to the currently active model-in-image:WLS-v1 image, but with the following updates:  An updated web application v2 at the myapp-v2 directory path within the WDT application archive instead of myapp-v1. An updated model YAML file within the image that points to the new web application path.</description>
    </item>
    
    <item>
      <title>Coding standards</title>
      <link>/weblogic-kubernetes-operator/developerguide/coding-standards/</link>
      <pubDate>Sat, 23 Feb 2019 17:24:10 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/developerguide/coding-standards/</guid>
      <description>This project has adopted the following coding standards:
 Code will be formated using Oracle / WebLogic standards, which are identical to the Google Java Style. Javadoc must be provided for all public packages, classes, and methods, and must include all parameters and returns. Javadoc is not required for methods that override or implement methods that are already documented. All non-trivial methods should include LOGGER.entering() and LOGGER.exiting() calls. The LOGGER.exiting() call should include the value that is going to be returned from the method, unless that value includes a credential or other sensitive information.</description>
    </item>
    
    <item>
      <title>RBAC</title>
      <link>/weblogic-kubernetes-operator/security/rbac/</link>
      <pubDate>Sat, 23 Feb 2019 17:15:36 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/security/rbac/</guid>
      <description>Contents  Overview Operator RBAC definitions  Role and RoleBinding naming conventions ClusterRole and ClusterRoleBinding naming conventions   RoleBindings ClusterRoleBindings  Overview The operator assumes that certain Kubernetes Roles are created in the Kubernetes cluster. The operator Helm chart creates the required ClusterRoles, ClusterRoleBindings, Roles, and RoleBindings for the ServiceAccount that is used by the operator. The operator will also attempt to verify that the RBAC settings are correct when the operator starts running.</description>
    </item>
    
    <item>
      <title>Prepare for a domain</title>
      <link>/weblogic-kubernetes-operator/quickstart/prepare/</link>
      <pubDate>Fri, 22 Feb 2019 15:44:42 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/quickstart/prepare/</guid>
      <description>Create a namespace that can host one or more domains:
$ kubectl create namespace sample-domain1-ns   Use helm to configure the operator to manage domains in this namespace:
$ helm upgrade sample-weblogic-operator kubernetes/charts/weblogic-operator \  --namespace sample-weblogic-operator-ns \  --reuse-values \  --set &amp;#34;domainNamespaces={sample-domain1-ns}&amp;#34; \  --wait   Configure Traefik to manage ingresses created in this namespace:
$ helm upgrade traefik-operator stable/traefik \  --namespace traefik \  --reuse-values \  --set &amp;#34;kubernetes.</description>
    </item>
    
    <item>
      <title>Disabling Fast Application Notifications</title>
      <link>/weblogic-kubernetes-operator/faq/fan/</link>
      <pubDate>Fri, 11 Oct 2019 17:20:00 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/faq/fan/</guid>
      <description>To support Fast Application Notifications (FAN), Oracle databases configure GRID (Oracle Grid Infrastructure). GRID is typically associated with (and required by) Oracle RAC databases but can also be used in other configurations. Oracle Autonomous Database-Serverless (ATP-S) does not provide GRID.
When connecting to a database that does not have GRID, the only type of WebLogic Server data source that is supported is the Generic Data Sources. Multi Data Sources and Active GridLink data sources cannot be used because they work with RAC.</description>
    </item>
    
    <item>
      <title>Istio support</title>
      <link>/weblogic-kubernetes-operator/userguide/istio/istio/</link>
      <pubDate>Thu, 15 Aug 2019 13:30:04 -0400</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/istio/istio/</guid>
      <description>Overview WebLogic Server Kubernetes Operator version 2.6 and later, includes support for Istio 1.4.2 and later. This support lets you run the operator, and WebLogic domains managed by the operator, with Istio sidecar injection enabled. You can use Istio gateways and virtual services to access applications deployed in these domains. If your applications have suitable tracing code in them, then you will also be able to use distributed tracing, such as Jaeger, to trace requests across domains and to other components and services that have tracing enabled.</description>
    </item>
    
    <item>
      <title>Tools</title>
      <link>/weblogic-kubernetes-operator/userguide/cicd/tools/</link>
      <pubDate>Thu, 11 Apr 2019 13:50:15 -0400</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/cicd/tools/</guid>
      <description>WebLogic Deploy Tooling (WDT) You can use several of the WDT tools in a CI/CD pipeline. For example, the createDomain tool creates a new domain based on a simple model, and updateDomain (and deployApps) uses the same model concept to update an existing domain (preserving the same domain encryption key). The deployApps tool is very similar to the updateDomain tool, but limits what can be updated to application-related configuration attributes such as data sources and application archives.</description>
    </item>
    
    <item>
      <title>Secrets</title>
      <link>/weblogic-kubernetes-operator/security/secrets/</link>
      <pubDate>Sat, 23 Feb 2019 17:36:33 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/security/secrets/</guid>
      <description>Contents  Domain credentials secret Domain image pull secret Operator image pull secret Operator configuration override secrets Operator external REST interface secret Operator internal REST interface secret  Domain credentials secret The credentials for the WebLogic domain are kept in a Kubernetes Secret where the name of the secret is specified using webLogicCredentialsSecret in the WebLogic Domain resource. Also, the domain credentials secret must be created in the namespace where the Domain will be running.</description>
    </item>
    
    <item>
      <title>Cleanup</title>
      <link>/weblogic-kubernetes-operator/samples/simple/domains/model-in-image/cleanup/</link>
      <pubDate>Sat, 23 Feb 2019 17:32:31 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/samples/simple/domains/model-in-image/cleanup/</guid>
      <description>To remove the resources you have created in these samples:
  Delete the resources associated with the domain.
$ /tmp/weblogic-kubernetes-operator/kubernetes/samples/scripts/delete-domain/delete-weblogic-domain-resources.sh -d sample-domain1 $ /tmp/weblogic-kubernetes-operator/kubernetes/samples/scripts/delete-domain/delete-weblogic-domain-resources.sh -d sample-domain2 This deletes the domain and any related resources that are labeled with the domain UID sample-domain1 and sample-domain2.
It leaves the namespace intact, the operator running, the load balancer running (if installed), and the database running (if installed).
 Note: When you delete a domain, the operator will detect your domain deletion and shut down its pods.</description>
    </item>
    
    <item>
      <title>Code structure</title>
      <link>/weblogic-kubernetes-operator/developerguide/code-structure/</link>
      <pubDate>Sat, 23 Feb 2019 17:25:04 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/developerguide/code-structure/</guid>
      <description>This project has the following directory structure:
 docs: Helm charts, Javadoc, Operator REST API Swagger, and Domain reference docs-source: This documentation integration-tests: Original, JUnit 4 integration test suite (see also new-integration-tests) json-schema: Java model to JSON schema generator json-schema-maven-plugin: Maven plugin for schema generator kubernetes/charts: Helm charts kubernetes/samples: All samples, including for WebLogic domain creation new-integration-tests: JUnit 5 integration test suite (see also integration-tests) operator: Operator runtime site: Historical documentation src/scripts: Scripts operator injects into WebLogic Server instance Pods swagger: Swagger files for the Kubernetes API server and Domain type  Watch package The Watch API in the Kubernetes Java client provides a watch capability across a specific list of resources for a limited amount of time.</description>
    </item>
    
    <item>
      <title>Create a domain</title>
      <link>/weblogic-kubernetes-operator/quickstart/create-domain/</link>
      <pubDate>Fri, 22 Feb 2019 15:44:42 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/quickstart/create-domain/</guid>
      <description>For use in the following steps:
 Select a user name and password, following the required rules for password creation (at least 8 alphanumeric characters with at least one number or special character). Pick or create a directory to which you can write output.    Create a Kubernetes Secret for the WebLogic administrator credentials containing the username and password for the domain, using the create-weblogic-credentials script:</description>
    </item>
    
    <item>
      <title>Using OCI File Storage (FSS) for persistent volumes</title>
      <link>/weblogic-kubernetes-operator/faq/oci-fss-pv/</link>
      <pubDate>Wed, 12 Feb 2020 12:12:12 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/faq/oci-fss-pv/</guid>
      <description>If you are running your Kubernetes cluster on Oracle Container Engine for Kubernetes (commonly known as OKE), and you use OCI File Storage (FSS) for persistent volumes to store the WebLogic domain home, then the file system handling, as demonstrated in the operator persistent volume sample, will require an update to properly initialize the file ownership on the persistent volume when the domain is initially created.
File permission handling on persistent volumes can differ between cloud providers and even with the underlying storage handling on Linux based systems.</description>
    </item>
    
    <item>
      <title>OpenShift</title>
      <link>/weblogic-kubernetes-operator/security/openshift/</link>
      <pubDate>Fri, 04 Oct 2019 08:08:08 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/security/openshift/</guid>
      <description>OpenShift anyuid security context The Docker images that Oracle publishes default to the container user as oracle, which is UID 1000 and GID 1000. When running the Oracle images or layered images that retain the default user as oracle with OpenShift, the anyuid security context constraint is required to ensure proper access to the file system within the Docker image. This means that the administrator must:
 Ensure the anyuid security content is granted Ensure that WebLogic containers are annotated with openshift.</description>
    </item>
    
    <item>
      <title>Asynchronous call model</title>
      <link>/weblogic-kubernetes-operator/developerguide/asynchronous-call-model/</link>
      <pubDate>Sat, 23 Feb 2019 17:20:00 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/developerguide/asynchronous-call-model/</guid>
      <description>Our expectation is that customers will task the operator with managing hundreds of WebLogic domains across dozens of Kubernetes Namespaces. Therefore, we have designed the operator with an efficient user-level threads pattern. We&amp;rsquo;ve used that pattern to implement an asynchronous call model for Kubernetes API requests. This call model has built-in support for timeouts, retries with exponential back-off, and lists that exceed the requested maximum size using the continuance functionality.</description>
    </item>
    
    <item>
      <title>Clean up</title>
      <link>/weblogic-kubernetes-operator/quickstart/cleanup/</link>
      <pubDate>Fri, 22 Feb 2019 15:44:42 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/quickstart/cleanup/</guid>
      <description>Remove the domain.   Remove the domain&amp;rsquo;s ingress by using helm:
$ helm uninstall sample-domain1-ingress -n sample-domain1-ns   Remove the Kubernetes resources associated with the domain by using the sample delete-weblogic-domain-resources script:
$ kubernetes/samples/scripts/delete-domain/delete-weblogic-domain-resources.sh -d sample-domain1   Use kubectl to confirm that the WebLogic Server instance Pods and Domain are gone:
$ kubectl get pods -n sample-domain1-ns $ kubectl get domains -n sample-domain1-ns   Remove the domain namespace.</description>
    </item>
    
    <item>
      <title>Using an OCI load balancer</title>
      <link>/weblogic-kubernetes-operator/faq/oci-lb/</link>
      <pubDate>Wed, 25 Sep 2019 12:41:38 -0400</pubDate>
      
      <guid>/weblogic-kubernetes-operator/faq/oci-lb/</guid>
      <description>If you are running your Kubernetes cluster on Oracle Container Engine for Kubernetes (commonly known as OKE), then you can have OCI automatically provision load balancers for you by creating a Service of type LoadBalancer instead of (or in addition to) installing an ingress controller like Traefik or Voyager.
OKE Kubernetes worker nodes typically do not have public IP addresses. This means that the NodePort services created by the operator are not usable, because they would expose ports on the worker node&amp;rsquo;s private IP addresses only, which are not reachable from outside the cluster.</description>
    </item>
    
    <item>
      <title>Domain processing</title>
      <link>/weblogic-kubernetes-operator/developerguide/domain-processing/</link>
      <pubDate>Sat, 23 Feb 2019 17:20:20 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/developerguide/domain-processing/</guid>
      <description>When the operator starts, it lists all the existing Domains and then processes these Domains to create the necessary Kubernetes resources, such as Pods and Services, if they don&amp;rsquo;t already exist. This initialization also includes looking for any stranded resources that, while created by the operator, no longer correlate with a Domain.
After this, the operator starts watches for changes to Domains and any changes to other resources created by the operator.</description>
    </item>
    
    <item>
      <title>Providing access to a PersistentVolumeClaim</title>
      <link>/weblogic-kubernetes-operator/faq/volumes/</link>
      <pubDate>Tue, 07 Jan 2020 15:02:28 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/faq/volumes/</guid>
      <description>I need to provide an instance with access to a PersistentVolumeClaim.
 Some applications need access to a file, either to read data or to provide additional logging beyond what is built into the operator. One common way of doing that within Kubernetes is to create a PersistentVolumeClaim (PVC) and map it to a file. The domain configuration can then be used to provide access to the claim across the domain, within a single cluster, or for a single server.</description>
    </item>
    
    <item>
      <title>Documentation</title>
      <link>/weblogic-kubernetes-operator/developerguide/documentation/</link>
      <pubDate>Tue, 19 Mar 2019 07:13:22 -0400</pubDate>
      
      <guid>/weblogic-kubernetes-operator/developerguide/documentation/</guid>
      <description>This documentation is produced using Hugo. To make an update to the documentation, follow this process:
  If you have not already done so, clone the repository.
git clone https://github.com/oracle/weblogic-kubernetes-operator   Create a new branch from master.
git checkout master git pull origin master git checkout -b your-branch   Make your documentation updates by editing the source files in docs-source/content. Make sure you check in the changes from the docs-source/content area only; do not build the site and check in the static files.</description>
    </item>
    
    <item>
      <title>Backward compatibility</title>
      <link>/weblogic-kubernetes-operator/developerguide/backwards-compatibility/</link>
      <pubDate>Sat, 23 Feb 2019 17:26:09 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/developerguide/backwards-compatibility/</guid>
      <description>Starting with the 2.0.1 release, operator releases must be backward compatible with respect to the Domain schema, operator Helm chart input values, configuration overrides template, Kubernetes resources created by the operator Helm chart, Kubernetes resources created by the operator, and the operator REST interface. We will maintain compatibility for three releases, except in the case of a clearly communicated deprecated feature, which will be maintained for one release after a replacement is available.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>/weblogic-kubernetes-operator/userguide/managing-domains/model-in-image/overview/</link>
      <pubDate>Wed, 11 Mar 2020 16:45:16 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/managing-domains/model-in-image/overview/</guid>
      <description>Content  Introduction WebLogic Deploy Tool models Runtime behavior Runtime updates Continuous integration and delivery (CI/CD) References  Introduction Model in Image is an alternative to the operator&amp;rsquo;s Domain in Image and Domain in PV domain types. See Choose a domain home source type for a comparison of operator domain types.
Unlike Domain in PV and Domain in Image, Model in Image eliminates the need to pre-create your WebLogic domain home prior to deploying your Domain YAML file.</description>
    </item>
    
    <item>
      <title>Providing access to a ConfigMap</title>
      <link>/weblogic-kubernetes-operator/faq/configmaps/</link>
      <pubDate>Tue, 07 Jan 2020 15:02:28 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/faq/configmaps/</guid>
      <description>I need to provide an instance with access to a ConfigMap.
 Configuration files can be supplied to Kubernetes Pods and Jobs by a ConfigMap, which consists of a set of key-value pairs. Each entry may be accessed by one or more operator-managed nodes as a read-only text file. Access can be provided across the domain, within a single cluster, or for a single server. In each case, the access is configured within the serverPod element of the desired scope.</description>
    </item>
    
    <item>
      <title>External WebLogic clients</title>
      <link>/weblogic-kubernetes-operator/faq/external-clients/</link>
      <pubDate>Thu, 21 Nov 2019 21:23:03 +0000</pubDate>
      
      <guid>/weblogic-kubernetes-operator/faq/external-clients/</guid>
      <description>Contents  Overview Load balancer tunneling Kubernetes NodePorts Adding a WebLogic custom channel  When is a WebLogic custom channel needed? Configuring a WebLogic custom channel WebLogic custom channel notes   Setting up a NodePort  Getting started Sample NodePort resource Table of NodePort attributes   Security notes Enabling unknown host access  When is it necessary to enable unknown host access? How to enable unknown host access   Optional reading  Overview When WebLogic clients and servers are external to Kubernetes, and you want to give them access to Kubernetes hosted WebLogic cluster EJBs and JMS, there are two supported approaches:</description>
    </item>
    
    <item>
      <title>Coherence requirements</title>
      <link>/weblogic-kubernetes-operator/faq/coherence-requirements/</link>
      <pubDate>Mon, 12 Aug 2019 12:41:38 -0400</pubDate>
      
      <guid>/weblogic-kubernetes-operator/faq/coherence-requirements/</guid>
      <description>If you are running Coherence on Kubernetes, either inside a WebLogic domain or standalone, then there are some additional requirements to make sure that Coherence can form clusters.
Note that some Fusion Middleware products, like SOA Suite, use Coherence and so these requirements apply to them.
Unicast and Well Known Address When the first Coherence process starts, it will form a cluster. The next Coherence process to start (for example, in a different pod), will use UDP to try to contact the senior member.</description>
    </item>
    
    <item>
      <title>Pod memory and CPU resources</title>
      <link>/weblogic-kubernetes-operator/faq/resource-settings/</link>
      <pubDate>Tue, 30 Jun 2020 08:55:00 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/faq/resource-settings/</guid>
      <description>Contents  Introduction Setting resource requests and limits in a Domain YAML file Determining Pod Quality Of Service Java heap size and memory resource considerations  Importance of setting heap size and memory resources Default heap sizes Configuring heap size   CPU resource considerations Operator sample heap and resource configuration Configuring CPU affinity Measuring JVM heap, Pod CPU, and Pod memory References  Introduction The operator creates a container in its own Pod for each WebLogic Server instance.</description>
    </item>
    
    <item>
      <title>Usage</title>
      <link>/weblogic-kubernetes-operator/userguide/managing-domains/model-in-image/usage/</link>
      <pubDate>Wed, 11 Mar 2020 16:45:16 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/managing-domains/model-in-image/usage/</guid>
      <description>This document describes what&amp;rsquo;s needed to create and deploy a typical Model in Image domain.
Contents  WebLogic Server Kubernetes Operator WebLogic Server image Optional WDT model ConfigMap Required runtime encryption secret Secrets for model macros Domain fields Always use external state Requirements for JRF domain types  WebLogic Server Kubernetes Operator Deploy the operator and ensure that it is monitoring the desired namespace for your Model in Image domain. See Manage operators and Quick Start.</description>
    </item>
    
    <item>
      <title>Model files</title>
      <link>/weblogic-kubernetes-operator/userguide/managing-domains/model-in-image/model-files/</link>
      <pubDate>Wed, 11 Mar 2020 16:45:16 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/managing-domains/model-in-image/model-files/</guid>
      <description>Contents  Introduction Sample model file Important notes about Model in Image model files Model file naming and loading order Model file macros  Using secrets in model files Using environment variables in model files Combining secrets and environment variables in model files    Introduction This document describes basic Model in Image model file syntax, naming, and macros. For additional information, see the WebLogic Deploy Tool documentation.
The WDT Discover Domain Tool is particularly useful for generating model files from an existing domain home.</description>
    </item>
    
    <item>
      <title>Runtime updates</title>
      <link>/weblogic-kubernetes-operator/userguide/managing-domains/model-in-image/runtime-updates/</link>
      <pubDate>Wed, 11 Mar 2020 16:45:16 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/managing-domains/model-in-image/runtime-updates/</guid>
      <description>Contents  Overview Important notes Frequently asked questions Supported and unsupported updates Changing a Domain restartVersion Using the WDT Discover and Compare Model Tools Example of adding a data source  Overview If you want to make a configuration change to a running Model in Image domain, and you want the change to survive WebLogic Server pod restarts, then you can modify your existing model using one of the following approaches:</description>
    </item>
    
    <item>
      <title>Debugging</title>
      <link>/weblogic-kubernetes-operator/userguide/managing-domains/model-in-image/debugging/</link>
      <pubDate>Wed, 11 Mar 2020 16:45:16 -0500</pubDate>
      
      <guid>/weblogic-kubernetes-operator/userguide/managing-domains/model-in-image/debugging/</guid>
      <description>Here are some suggestions for debugging problems with Model in Image after your Domain YAML file is deployed.
Contents  Check the Domain status Check the introspector job Check the WebLogic Server pods Check the operator log Check the FAQ  Check the Domain status To check the Domain status: kubectl -n MY_NAMESPACE describe domain MY_DOMAINUID.
Check the introspector job If your introspector job failed, then examine the kubectl describe of the job and its pod, and also examine its log, if one exists.</description>
    </item>
    
    <item>
      <title>Release Notes</title>
      <link>/weblogic-kubernetes-operator/release-notes/</link>
      <pubDate>Fri, 15 Mar 2019 11:25:28 -0400</pubDate>
      
      <guid>/weblogic-kubernetes-operator/release-notes/</guid>
      <description>Releases    Date Version Introduces backward incompatibilities? Changes     November 9, 2020 v3.0.3 no This release contains a fix for pods that are stuck in the Terminating state after an unexpected shut down of a worker node.   September 15, 2020 v3.0.2 no This release contains several fixes, including improvements to log rotation and a fix that avoids unnecessarily updating the domain status.   August 13, 2020 v3.</description>
    </item>
    
  </channel>
</rss>