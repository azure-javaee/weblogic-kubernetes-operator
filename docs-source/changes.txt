diff --git a/docs-source/content/faq/external-clients.md b/docs-source/content/faq/external-clients.md
index 08729cb62..96c5ecb78 100644
--- a/docs-source/content/faq/external-clients.md
+++ b/docs-source/content/faq/external-clients.md
@@ -3,7 +3,7 @@ title: "External WebLogic clients"
 date: 2019-11-21T21:23:03Z
 draft: false
 weight: 11
-description: "This FAQ discusses approaches for giving external WebLogic or servers access to a Kubernetes hosted WebLogic cluster's JMS or EJBs, and for giving Kubernetes hosted clients or servers access to remotely hosted WebLogic JMS or EJBs."
+description: "This FAQ describes approaches for giving external WebLogic clients or servers access to a Kubernetes hosted WebLogic cluster JMS or EJBs, and for giving Kubernetes hosted clients or servers access to remotely hosted WebLogic JMS or EJBs."
 ---
 
 #### Contents
@@ -27,18 +27,18 @@ description: "This FAQ discusses approaches for giving external WebLogic or serv
 
 #### Overview
 
-There are two supported approaches for giving WebLogic clients and servers that are external to Kubernetes access to Kubernetes hosted WebLogic cluster EJBs and JMS:
+There are two supported approaches for giving WebLogic clients and servers that are external to Kubernetes, access to Kubernetes hosted WebLogic cluster EJBs and JMS:
 
   * [Load balancer tunneling](#load-balancer-tunneling) (preferred)
   * [Kubernetes `NodePorts`](#kubernetes-nodeports)
 
-Conversely, if giving a Kubernetes hosted WebLogic Server access to an external WebLogic Server's EJBs, JMS, or JTA, then consider the following:
+Conversely, if giving a Kubernetes hosted WebLogic Server access to an external WebLogic Server EJBs, JMS, or JTA, then consider the following:
 
   * You may need to [enable unknown host access](#enabling-unknown-host-access) on the external WebLogic Servers.
-  * Plus, if the target server can only be accessed through a load balancer via HTTP:
-    * [Setup an HTTP tunneling enabled custom channel](#adding-a-weblogic-custom-channel) on the external WebLogic Servers.
+  * Plus, if the target server can be accessed only through a load balancer using HTTP:
+    * [Set up an HTTP tunneling-enabled custom channel](#adding-a-weblogic-custom-channel) on the external WebLogic Servers.
     * Specify URLs on the source server that resolve to the load balancer's address and that start with `http` instead of `t3`.
-    * Ensure the load balancer configures the HTTP flow to be 'sticky'. 
+    * Ensure the load balancer configures the HTTP flow to be 'sticky'.
 
 {{% notice note %}}
 The operator does not currently support external WebLogic JTA access to a Kubernetes hosted WebLogic cluster. This is because external JTA access requires each server in a cluster to be individually addressable, but this conflicts with the current operator requirement that a network channel in a cluster have the same port across all servers in the cluster.
@@ -50,9 +50,9 @@ Load balancer tunneling is the preferred approach for giving external clients an
 
 Here are the steps:
 
-- Configure a custom channel for the T3 protocol in WebLogic that enables HTTP tunneling, and specifies an external address and port that correspond to the address and port remote clients will use to access the load balancer.  See  [Adding a WebLogic custom channel](#adding-a-weblogic-custom-channel) for samples and details.
+- In WebLogic, configure a custom channel for the T3 protocol that enables HTTP tunneling, and specifies an external address and port that correspond to the address and port remote clients will use to access the load balancer.  See  [Adding a WebLogic custom channel](#adding-a-weblogic-custom-channel) for samples and details.
 
-- Set up a load balancer that redirects HTTP traffic to the custom channel. For more information on load balancers, see [Ingress]({{<relref "/userguide/managing-domains/ingress/_index.md">}}). If you're also using OKE/OCI to host your Kubernetes cluster, also see [Using an OCI Load Balancer]({{<relref "/faq/oci-lb">}}).
+- Set up a load balancer that redirects HTTP traffic to the custom channel. For more information on load balancers, see [Ingress]({{<relref "/userguide/managing-domains/ingress/_index.md">}}). If you're using OKE/OCI to host your Kubernetes cluster, also see [Using an OCI Load Balancer]({{<relref "/faq/oci-lb">}}).
 
 - __Important__: Ensure that the load balancer configures the HTTP flow to be 'sticky' - for example, a Traefik load balancer has a `sticky sessions` option. This ensures that all of the packets of a tunneling client connection flow to the same pod, otherwise the connection will stall when its packets are load balanced to a different pod.
 
@@ -72,7 +72,7 @@ Kubernetes `NodePorts` provide an alternative approach for giving external WebLo
 
 Here are the steps:
 
-- Configure a custom channel for the T3 protocol in WebLogic that specifies an external address and port that are suitable for remote client use.  See [Adding a WebLogic custom channel](#adding-a-weblogic-custom-channel).
+- In WebLogic, configure a custom channel for the T3 protocol that specifies an external address and port that are suitable for remote client use.  See [Adding a WebLogic custom channel](#adding-a-weblogic-custom-channel).
 
 - Define a Kubernetes `NodePort` to publicly expose the WebLogic ports. See [Setting up a `NodePort`](#setting-up-a-nodeport).
 
@@ -88,7 +88,7 @@ WebLogic implicitly creates a multi-protocol default channel that spans the `Lis
 
 A custom channel provides a way to configure an external listen address and port for use by external clients, unlike a default channel. External listen address or port configuration is needed when a channel's configured listen address or port would not work if used to form a URL in the remote client. This is because remote EJB and JMS clients internally use their client's channel's configured network information to reconnect to WebLogic when needed. (The EJB and JMS clients do not always use the initial URL specified in the client's JNDI context.)
 
-A custom channel can be locked down using two-way SSL as a way to prevent access by unauthorized external JMS and EJB clients, only accepts protocols that are explicitly enabled for the channel, and can be configured to be the only channel that accepts EJB/JMS clients that tunnel over HTTP. A default channel may often be deliberately unencrypted for convenient internal use, or, if used externally, is only used for web traffic (not tunneling traffic). In addition, a default channel supports several protocols but it's a best practice to limit the protocols that can be accessed by external clients. Finally, external clients may require access using HTTP tunneling in order to make connections, but it's often inadvisable to enable tunneling for an unsecured default channel that's already servicing external HTTP traffic. This is because enabling HTTP tunneling would potentially allow unauthorized external JMS and EJB clients unsecured access to the WebLogic cluster through the same HTTP path.
+A custom channel can be locked down using two-way SSL as a way to prevent access by unauthorized external JMS and EJB clients, only accepts protocols that are explicitly enabled for the channel, and can be configured to be the only channel that accepts EJB/JMS clients that tunnel over HTTP. A default channel may often be deliberately unencrypted for convenient internal use, or, if used externally, is used for web traffic (not tunneling traffic) only. In addition, a default channel supports several protocols but it's a best practice to limit the protocols that can be accessed by external clients. Finally, external clients may require access using HTTP tunneling in order to make connections, but it's often inadvisable to enable tunneling for an unsecured default channel that's already servicing external HTTP traffic. This is because enabling HTTP tunneling would potentially allow unauthorized external JMS and EJB clients unsecured access to the WebLogic cluster through the same HTTP path.
 
 ##### Configuring a WebLogic custom channel
 
@@ -106,7 +106,7 @@ The basic requirements for configuring a custom channel for remote EJB and JMS a
 
 - For clusters that are _not_ operator controlled, minimally ensure that the server's default channel `ListenAddress` is configured. Oracle strongly recommends configuring a `ListenAddress` on all WebLogic Servers. Note that if a NAP's `ListenAddress` is left blank, then it will use the default channel's `ListenAddress`. (This is not a concern for operator controlled clusters as the operator sets the listen addresses on every WebLogic Server.)
 
-For example, here is a snippet of a WebLogic domain `config.xml` for channel `MyChannel` defined for an operator controlled WebLogic dynamic cluster named `cluster-1`:
+For example, here is a snippet of a WebLogic domain `config.xml` file for channel `MyChannel` defined for an operator controlled WebLogic dynamic cluster named `cluster-1`:
 
 ```
 <server-template>
@@ -142,7 +142,7 @@ For example, here is a snippet of a WebLogic domain `config.xml` for channel `My
 </cluster>
 ```
 
-And, here is a snippet of offline WLST code that corresponds to the above `config.xml` snippet:
+And, here is a snippet of offline WLST code that corresponds to the above `config.xml` file snippet:
 
 ```
   templateName = "cluster-1-template"
@@ -172,7 +172,7 @@ In this example:
 
 - Internal clients running in the same Kubernetes cluster as the channel can access the cluster using `t3://DOMAIN_UID-cluster-cluster-1:8001`.
 
-- External clients would be expected to access the cluster using the custom channel using URLs like `t3://some.public.address.com:30999` or, if using tunneling, `http://some.public.address.com:30999`.
+- External clients would be expected to access the cluster using the custom channel with URLs like `t3://some.public.address.com:30999` or, if using tunneling, `http://some.public.address.com:30999`.
 
 ##### WebLogic custom channel notes
 
@@ -238,9 +238,9 @@ spec:
 
 ##### When is it necessary to enable unknown host access?
 
-If a source WebLogic Server attempts to initiate an EJB, JMS, or JTA connection with a target WebLogic Server, then the target WebLogic Server will reject the connection by default if it cannot find the source server's listen address in its DNS. Such a failed connection attempt can yield log messages or exceptions like "...RJVM has already been shutdown..." or "...address was valid earlier, but now we get...". 
+If a source WebLogic Server attempts to initiate an EJB, JMS, or JTA connection with a target WebLogic Server, then the target WebLogic Server will reject the connection by default if it cannot find the source server's listen address in its DNS. Such a failed connection attempt can yield log messages or exceptions like `"...RJVM has already been shutdown..."` or `"...address was valid earlier, but now we get..."`.
 
-This means that it's usually necessary to enable unknown host access on an external WebLogic Server so that it can support EJB, JMS, or JTA communication that is initated by an operator hosted WebLogic Server. For example, if an operator hosted WebLogic Server with service address 'mydomainuid-myservername' initiates a JMS connection to a remote WebLogic Server, then the remote server will implicitly attempt to lookup 'mydomainuid-myservername' in its DNS as part of the connection setup, and this lookup will typically fail.
+This means that it's usually necessary to enable unknown host access on an external WebLogic Server so that it can support EJB, JMS, or JTA communication that is initated by an operator hosted WebLogic Server. For example, if an operator hosted WebLogic Server with service address `mydomainuid-myservername` initiates a JMS connection to a remote WebLogic Server, then the remote server will implicitly attempt to lookup `mydomainuid-myservername` in its DNS as part of the connection setup, and this lookup will typically fail.
 
 Similarly, this also means that it's necessary to enable unknown host access on an operator hosted WebLogic Server that accepts EJB or JMS connection requests from external WebLogic Servers when the external WebLogic Server's listen addresses cannot be resolved by the DNS running in the Kuberneters cluster.
 
diff --git a/docs-source/content/userguide/managing-domains/domain-resource.md b/docs-source/content/userguide/managing-domains/domain-resource.md
index 5c5832e7e..1b4af808c 100644
--- a/docs-source/content/userguide/managing-domains/domain-resource.md
+++ b/docs-source/content/userguide/managing-domains/domain-resource.md
@@ -5,19 +5,19 @@ weight = 2
 pre = "<b> </b>"
 +++
 
-### Contents
+#### Contents
 
 - [Overview](#overview)
 - [Prerequisites](#prerequisites)
 - [Deploying domain resource YAML files](#deploying-domain-resource-yaml-files)
 - [Domain resource custom resource definition (CRD)](#domain-resource-custom-resource-definition-crd)
 - [Domain resource attribute references](#domain-resource-attribute-references)
-- [Leveraging `kubectl explain`](#leveraging-kubectl-explain)
+- [Using `kubectl explain`](#using-kubectl-explain)
 - [Domain spec elements](#domain-spec-elements)
 - [JVM memory and Java option environment variables](#jvm-memory-and-java-option-environment-variables)
 - [Pod generation](#pod-generation)
 
-### Overview
+#### Overview
 
 Use this document to create your own Domain resource, which can be used to configure the operation of your WebLogic Server domain. The Domain resource does not replace the traditional domain configuration files, but instead cooperates with those files to describe the Kubernetes artifacts of the corresponding domain.  For instance, the domain configuration will still specify deployed applications, data sources, and most other details about the domain while the Domain resource will specify the number of cluster members currently running or the persistent volumes that will be mounted into the containers running WebLogic Server instances.
 
@@ -25,7 +25,7 @@ Use this document to create your own Domain resource, which can be used to confi
 Many of the samples accompanying the operator project include scripts to generate an initial Domain resource from a set of simplified inputs; however, the Domain resource is the actual source of truth for how the operator will manage each WebLogic Server domain. You are encouraged to either start with the Domain resource YAML files generated by the various samples or create Domain resources manually or by using other tools based on the schema referenced here or this documentation.
 {{% /notice %}}
 
-### Prerequisites
+#### Prerequisites
 
 The following prerequisites must be fulfilled before proceeding with the creation of a domain resource:
 
@@ -33,9 +33,9 @@ The following prerequisites must be fulfilled before proceeding with the creatio
 * Make sure the WebLogic Server Kubernetes Operator is running and is configured to monitor the namespace.
 * Make sure any resources that the domain resource references are deployed to the same namespace. For example, all domain resources have a `spec.webLogicCredentialsSecret` field that references a Kubernetes Secret containing the `username` and `password` of the WebLogic server administrative account.
 
-For example, see the [Quick Start]({{< relref "/quickstart/_index.md" >}}) sample.
+For example, see the [Quick Start]({{< relref "/quickstart/_index.md" >}}).
 
-### Deploying domain resource YAML files
+#### Deploying domain resource YAML files
 
 Domains are defined using YAML files. For each WebLogic Server domain you want to run, you should create one Domain resource YAML file and apply it. In the example referenced below, the sample scripts generate a Domain resource YAML file that you can use as a basis. Copy the file and override the default settings so that it matches all the WebLogic Server domain parameters that define your domain.
 
@@ -66,7 +66,7 @@ Or this command:
 $ kubectl get domain [domain name] -n [namespace] -o yaml
 ```
 
-### Domain resource custom resource definition (CRD)
+#### Domain resource custom resource definition (CRD)
 
 The Domain type is defined by a Kubernetes CustomResourceDefinition (CRD) and, like all [Kubernetes objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/), is described by three sections: `metadata`, `spec`, and `status`.
 
@@ -90,7 +90,7 @@ After the CustomResourceDefinition is installed, either by the operator or using
 $ kubectl get crd domains.weblogic.oracle
 ```
 
-### Domain resource attribute references
+#### Domain resource attribute references
 
 The domain resource `metadata` section names the Domain and its namespace.  The name of the Domain is the default value for the `domain UID` which is used by the operator to distinguish domains running in the Kubernetes cluster that may have the same domain name. The Domain name must be unique in the namespace and the domain UID should be unique across the cluster.  The domain UID, Domain resource name, and domain name (from the WebLogic domain configuration) may all be different.
 
@@ -105,7 +105,7 @@ Here are some references you can use for the fields in these sections:
 - Swagger documentation is available [here](https://oracle.github.io/weblogic-kubernetes-operator/swagger/index.html).
 - Use [kubectl explain](leveraging--kubectl-explain-) from the command line.
 
-### Leveraging `kubectl explain`
+#### Using `kubectl explain`
 
 If you are using Kubernetes 1.16 or later, you can access the description of any field of the Domain using `kubectl explain`. For instance, the following command displays the description of the `domainUID` field:
 
@@ -126,7 +126,7 @@ DESCRIPTION:
      `metadata.name`.
 ```
 
-### Domain spec elements
+#### Domain spec elements
 
 The Domain `spec` section contains elements for configuring the domain operation and sub-sections specific to the Administration Server, specific clusters, or specific Managed Servers.
 
@@ -139,7 +139,7 @@ Elements related to domain identification, container image, and domain home:
 * `domainHome`: The directory containing the WebLogic domain configuration inside the container. Defaults to /shared/domains/domains/<domainUID> if `domainHomeSourceType` is PersistentVolume. Defaults to /u01/oracle/user_projects/domains/ if `domainHomeSourceType` is Image. Defaults to /u01/domains/<domainUID> if `domainHomeSourceType` is FromModel.
 * `domainHomeSourceType`: Domain home file system source type: Legal values: Image, PersistentVolume, FromModel. Image indicates that the domain home file system is present in the container image specified by the `image` field. PersistentVolume indicates that the domain home file system is located on a persistent volume. FromModel indicates that the domain home file system will be created and managed by the operator based on a WDT domain model. If this field is specified, it overrides the value of `domainHomeInImage`. If both fields are unspecified, then `domainHomeSourceType` defaults to Image.
 * `dataHome`: An optional directory in a server's container for data storage of default and custom file stores. If `dataHome` is not specified or its value is either not set or empty, then the data storage directories are determined from the WebLogic domain configuration.
-                   
+
 Elements related to logging:
 
 * `includeServerOutInPodLog`: Specifies whether the server .out file will be included in the Pod's log. Defaults to true.
@@ -170,7 +170,7 @@ Elements related to specifying and overriding WebLogic domain configuration:
   * `overrideDistributionStrategy`: Determines how updated configuration overrides are distributed to already running WebLogic Server instances following introspection when the `domainHomeSourceType` is PersistentVolume or Image. Configuration overrides are generated during introspection from Secrets, the `overrideConfigMap` field, and WebLogic domain topology. Legal values are DYNAMIC, which means that the operator will distribute updated configuration overrides dynamically to running servers, and ON_RESTART, which means that servers will use updated configuration overrides only after the server's next restart. The selection of ON_RESTART will not cause servers to restart when there are updated configuration overrides available. See also `introspectVersion`. Defaults to DYNAMIC.
   * `secrets`: A list of names of the Secrets for WebLogic [configuration overrides]({{< relref "/userguide/managing-domains/configoverrides/_index.md" >}}) or model. If this field is specified, then the value of `spec.configOverrideSecrets` is ignored.
   * `introspectorJobActiveDeadlineSeconds`: The introspector job timeout value in seconds. If this field is specified, then the operator's ConfigMap `data.introspectorJobActiveDeadlineSeconds` value is ignored. Defaults to 120 seconds.
-  
+
 * These elements are under `configuration.model`, only apply if the `domainHomeSourceType` is `FromModel`, and are discussed in [Model in Image]({{< relref "/userguide/managing-domains/model-in-image/_index.md" >}}).
 
   * `configMap`: Name of a ConfigMap containing the WebLogic Deploy Tooling model.
@@ -189,7 +189,7 @@ Elements related to specifying and overriding WebLogic domain configuration:
 
 Elements related to Kubernetes Pod and Service generation:
 
-* `serverPod`: Customization affecting the generation of Pods for WebLogic Server instances. 
+* `serverPod`: Customization affecting the generation of Pods for WebLogic Server instances.
 * `serverService`: Customization affecting the generation of Kubernetes Services for WebLogic Server instances.
 
 Sub-sections related to the Administration Server, specific clusters, or specific Managed Servers:
@@ -201,7 +201,7 @@ Sub-sections related to the Administration Server, specific clusters, or specifi
 The elements `serverStartPolicy`, `serverStartState`, `serverPod` and `serverService` are repeated under `adminServer` and under each entry of `clusters` or `managedServers`.  The values directly under `spec`, set the defaults for the entire domain.  The values under a specific entry under `clusters`, set the defaults for cluster members of that cluster.  The values under `adminServer` or an entry under `managedServers`, set the values for that specific server.  Values from the domain scope and values from the cluster (for cluster members) are merged with or overridden by the setting for the specific server depending on the element.  See [Startup and shutdown]({{< relref "/userguide/managing-domains/domain-lifecycle/startup.md" >}}) for details about `serverStartPolicy` combinations.
 
 {{% notice note %}}
-For additional domain resource attribute reference material see [Domain resource attribute references](domain-resource-attribute-references).
+For additional domain resource attribute reference material, see [Domain resource attribute references](domain-resource-attribute-references).
 {{% /notice %}}
 
 ### JVM memory and Java option environment variables
@@ -221,7 +221,7 @@ You can use the following environment variables to specify JVM memory and JVM op
   * If `NODEMGR_JAVA_OPTIONS` is not defined and `JAVA_OPTIONS` is defined, then the `JAVA_OPTIONS` value will be applied to the Node Manager instance.
   * If `NODEMGR_MEM_ARGS` is not defined, then default memory and Java security property values (`-Xms64m -Xmx100m -Djava.security.egd=file:/dev/./urandom`) will be applied to the Node Manager instance. It can be explicitly set to another value in your Domain YAML file using the `env` attribute under the `serverPod` configuration.
 * The `USER_MEM_ARGS` environment variable defaults to `-Djava.security.egd=file:/dev/./urandom` in all WebLogic Server pods and the WebLogic introspection job. It can be explicitly set to another value in your Domain YAML file using the `env` attribute under the `serverPod` configuration.
-* Notice that the `NODEMGR_MEM_ARGS` and `USER_MEM_ARGS` environment variables both set `-Djava.security.egd=file:/dev/./urandom` by default. This respectively helps to speed up the Node Manager and WebLogic Server startup on systems with low entropy. 
+* Notice that the `NODEMGR_MEM_ARGS` and `USER_MEM_ARGS` environment variables both set `-Djava.security.egd=file:/dev/./urandom` by default. This respectively helps to speed up the Node Manager and WebLogic Server startup on systems with low entropy.
 * For a detailed discussion of Java and pod memory tuning see the [Pod memory and CPU resources FAQ]({{<relref "/faq/resource-settings.md">}}).
 * You can use `JAVA_OPTIONS` and `WLSDEPLOY_PROPERTIES` to disable Fast Application Notifications (FAN); see the [Disable Fast Application Notifications FAQ]({{<relref "/faq/fan.md">}}) for details.
 
@@ -251,7 +251,7 @@ spec:
       value: "-Xms64m -Xmx100m -Djava.security.egd=file:/dev/./urandom "
 ```
 
-### Pod generation
+#### Pod generation
 
 The operator creates a Pod for each running WebLogic Server instance.  This Pod will have a container, named `weblogic-server`, based on the container image specified by the `image` field.  Additional Pod or container content can be specified using the elements under `serverPod`. This includes Kubernetes sidecar and init containers, labels, annotations, volumes, volume mounts, scheduling constraints, including anti-affinity, [resource requirements](https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/), or [security context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/).
 
